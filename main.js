(()=>{var e,r,t,n,o,i,a,c={3371:(e,r,t)=>{"use strict";function n(e,r){if(e){if("string"==typeof e)return o(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(e,r):void 0}}function o(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}function i(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t(8177),t(1038),t(8783),t(3210),t(2526),t(1817),t(1539),t(2165),t(6992),t(3948),t(7042),t(8309),t(4916);var a=function(){function e(r){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.worker=r,this.dnd=document.querySelector(".dnd"),this.dndInput=document.querySelector(".dnd-input"),this.choiceAlgor=document.querySelector(".choice-algor"),this.listAlgor=document.querySelector(".list-algors"),this.hashText=document.querySelector(".hash-calc-result"),this.algor=null,this.hash=null,this.file=null}var r,t;return r=e,(t=[{key:"events",value:function(){this.clickOnAlgorithms(),this.inputFile(),this.dropFile(),this.clickChoiceAlgorithms()}},{key:"inputFile",value:function(){var e=this;this.dndInput.addEventListener("input",(function(r){var t=r.target.files[0];e.file=t,e.resultCalcHash()}))}},{key:"dropFile",value:function(){var e=this;this.dndInput.addEventListener("dragover",(function(e){e.preventDefault()})),this.dndInput.addEventListener("drop",(function(r){r.preventDefault();var t,o,i=(t=Array.from(r.dataTransfer.files),o=1,function(e){if(Array.isArray(e))return e}(t)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,o,i=[],a=!0,c=!1;try{for(t=t.call(e);!(a=(n=t.next()).done)&&(i.push(n.value),!r||i.length!==r);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==t.return||t.return()}finally{if(c)throw o}}return i}}(t,o)||n(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());e.file=i[0],e.resultCalcHash()}))}},{key:"webWorker",value:function(e,r){var t=this;this.worker.addEventListener("message",(function(e){t.renderCalcHash(e.data)})),this.worker.addEventListener("error",(function(e){console.log(e)})),this.worker.postMessage({file:e,algor:r})}},{key:"resultCalcHash",value:function(){null!==this.file&&null!==this.algor&&this.webWorker(this.file,this.algor)}},{key:"renderCalcHash",value:function(e){this.hashText.textContent=e}},{key:"renderChangeAlgor",value:function(e){this.choiceAlgor.textContent="Hash Algorithm: ".concat(e)}},{key:"clickOnAlgorithms",value:function(){var e=this;this.choiceAlgor.addEventListener("click",(function(){e.listAlgor.classList.contains("none")?e.listAlgor.classList.remove("none"):e.listAlgor.classList.add("none")}))}},{key:"clickChoiceAlgorithms",value:function(){var e=this;this.listAlgor.addEventListener("click",(function(r){var t,o=function(e,r){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=n(e))){t&&(e=t);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,c=!0,u=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return c=e.done,e},e:function(e){u=!0,a=e},f:function(){try{c||null==t.return||t.return()}finally{if(u)throw a}}}}(document.querySelectorAll(".algor-name"));try{for(o.s();!(t=o.n()).done;){var i=t.value;r.target===i&&(e.algor=r.target.textContent.trim(),e.listAlgor.classList.add("none"),e.renderChangeAlgor(e.algor),e.resultCalcHash())}}catch(e){o.e(e)}finally{o.f()}}))}}])&&i(r.prototype,t),Object.defineProperty(r,"prototype",{writable:!1}),e}();console.log("app started"),new a(new function(){return new Worker(t.p+"web.worker.worker.js")}).events()},9662:(e,r,t)=>{var n=t(7854),o=t(614),i=t(6330),a=n.TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},6077:(e,r,t)=>{var n=t(7854),o=t(614),i=n.String,a=n.TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},1223:(e,r,t)=>{var n=t(5112),o=t(30),i=t(3070),a=n("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},9670:(e,r,t)=>{var n=t(7854),o=t(111),i=n.String,a=n.TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},8457:(e,r,t)=>{"use strict";var n=t(7854),o=t(9974),i=t(6916),a=t(7908),c=t(3411),u=t(7659),s=t(4411),l=t(6244),f=t(6135),p=t(8554),d=t(1246),v=n.Array;e.exports=function(e){var r=a(e),t=s(this),n=arguments.length,h=n>1?arguments[1]:void 0,y=void 0!==h;y&&(h=o(h,n>2?arguments[2]:void 0));var g,m,b,x,w,S,O=d(r),E=0;if(!O||this==v&&u(O))for(g=l(r),m=t?new this(g):v(g);g>E;E++)S=y?h(r[E],E):r[E],f(m,E,S);else for(w=(x=p(r,O)).next,m=t?new this:[];!(b=i(w,x)).done;E++)S=y?c(x,h,[b.value,E],!0):b.value,f(m,E,S);return m.length=E,m}},1318:(e,r,t)=>{var n=t(5656),o=t(1400),i=t(6244),a=function(e){return function(r,t,a){var c,u=n(r),s=i(u),l=o(a,s);if(e&&t!=t){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===t)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:(e,r,t)=>{var n=t(9974),o=t(1702),i=t(8361),a=t(7908),c=t(6244),u=t(5417),s=o([].push),l=function(e){var r=1==e,t=2==e,o=3==e,l=4==e,f=6==e,p=7==e,d=5==e||f;return function(v,h,y,g){for(var m,b,x=a(v),w=i(x),S=n(h,y),O=c(w),E=0,A=g||u,j=r?A(v,O):t||p?A(v,0):void 0;O>E;E++)if((d||E in w)&&(b=S(m=w[E],E,x),e))if(r)j[E]=b;else if(b)switch(e){case 3:return!0;case 5:return m;case 6:return E;case 2:s(j,m)}else switch(e){case 4:return!1;case 7:s(j,m)}return f?-1:o||l?l:j}};e.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6),filterReject:l(7)}},1194:(e,r,t)=>{var n=t(7293),o=t(5112),i=t(7392),a=o("species");e.exports=function(e){return i>=51||!n((function(){var r=[];return(r.constructor={})[a]=function(){return{foo:1}},1!==r[e](Boolean).foo}))}},1589:(e,r,t)=>{var n=t(7854),o=t(1400),i=t(6244),a=t(6135),c=n.Array,u=Math.max;e.exports=function(e,r,t){for(var n=i(e),s=o(r,n),l=o(void 0===t?n:t,n),f=c(u(l-s,0)),p=0;s<l;s++,p++)a(f,p,e[s]);return f.length=p,f}},206:(e,r,t)=>{var n=t(1702);e.exports=n([].slice)},7475:(e,r,t)=>{var n=t(7854),o=t(3157),i=t(4411),a=t(111),c=t(5112)("species"),u=n.Array;e.exports=function(e){var r;return o(e)&&(r=e.constructor,(i(r)&&(r===u||o(r.prototype))||a(r)&&null===(r=r[c]))&&(r=void 0)),void 0===r?u:r}},5417:(e,r,t)=>{var n=t(7475);e.exports=function(e,r){return new(n(e))(0===r?0:r)}},3411:(e,r,t)=>{var n=t(9670),o=t(9212);e.exports=function(e,r,t,i){try{return i?r(n(t)[0],t[1]):r(t)}catch(r){o(e,"throw",r)}}},7072:(e,r,t)=>{var n=t(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,r){if(!r&&!o)return!1;var t=!1;try{var i={};i[n]=function(){return{next:function(){return{done:t=!0}}}},e(i)}catch(e){}return t}},4326:(e,r,t)=>{var n=t(1702),o=n({}.toString),i=n("".slice);e.exports=function(e){return i(o(e),8,-1)}},648:(e,r,t)=>{var n=t(7854),o=t(1694),i=t(614),a=t(4326),c=t(5112)("toStringTag"),u=n.Object,s="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var r,t,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,r){try{return e[r]}catch(e){}}(r=u(e),c))?t:s?a(r):"Object"==(n=a(r))&&i(r.callee)?"Arguments":n}},9920:(e,r,t)=>{var n=t(2597),o=t(3887),i=t(1236),a=t(3070);e.exports=function(e,r,t){for(var c=o(r),u=a.f,s=i.f,l=0;l<c.length;l++){var f=c[l];n(e,f)||t&&n(t,f)||u(e,f,s(r,f))}}},8544:(e,r,t)=>{var n=t(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4994:(e,r,t)=>{"use strict";var n=t(3383).IteratorPrototype,o=t(30),i=t(9114),a=t(8003),c=t(7497),u=function(){return this};e.exports=function(e,r,t,s){var l=r+" Iterator";return e.prototype=o(n,{next:i(+!s,t)}),a(e,l,!1,!0),c[l]=u,e}},8880:(e,r,t)=>{var n=t(9781),o=t(3070),i=t(9114);e.exports=n?function(e,r,t){return o.f(e,r,i(1,t))}:function(e,r,t){return e[r]=t,e}},9114:e=>{e.exports=function(e,r){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:r}}},6135:(e,r,t)=>{"use strict";var n=t(4948),o=t(3070),i=t(9114);e.exports=function(e,r,t){var a=n(r);a in e?o.f(e,a,i(0,t)):e[a]=t}},654:(e,r,t)=>{"use strict";var n=t(2109),o=t(6916),i=t(1913),a=t(6530),c=t(614),u=t(4994),s=t(9518),l=t(7674),f=t(8003),p=t(8880),d=t(1320),v=t(5112),h=t(7497),y=t(3383),g=a.PROPER,m=a.CONFIGURABLE,b=y.IteratorPrototype,x=y.BUGGY_SAFARI_ITERATORS,w=v("iterator"),S="keys",O="values",E="entries",A=function(){return this};e.exports=function(e,r,t,a,v,y,j){u(t,r,a);var I,k,_,P=function(e){if(e===v&&R)return R;if(!x&&e in C)return C[e];switch(e){case S:case O:case E:return function(){return new t(this,e)}}return function(){return new t(this)}},T=r+" Iterator",L=!1,C=e.prototype,D=C[w]||C["@@iterator"]||v&&C[v],R=!x&&D||P(v),H="Array"==r&&C.entries||D;if(H&&(I=s(H.call(new e)))!==Object.prototype&&I.next&&(i||s(I)===b||(l?l(I,b):c(I[w])||d(I,w,A)),f(I,T,!0,!0),i&&(h[T]=A)),g&&v==O&&D&&D.name!==O&&(!i&&m?p(C,"name",O):(L=!0,R=function(){return o(D,this)})),v)if(k={values:P(O),keys:y?R:P(S),entries:P(E)},j)for(_ in k)(x||L||!(_ in C))&&d(C,_,k[_]);else n({target:r,proto:!0,forced:x||L},k);return i&&!j||C[w]===R||d(C,w,R,{name:v}),h[r]=R,k}},7235:(e,r,t)=>{var n=t(857),o=t(2597),i=t(6061),a=t(3070).f;e.exports=function(e){var r=n.Symbol||(n.Symbol={});o(r,e)||a(r,e,{value:i.f(e)})}},9781:(e,r,t)=>{var n=t(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,r,t)=>{var n=t(7854),o=t(111),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(e,r,t)=>{var n=t(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;e.exports=o===Object.prototype?void 0:o},8113:(e,r,t)=>{var n=t(5005);e.exports=n("navigator","userAgent")||""},7392:(e,r,t)=>{var n,o,i=t(7854),a=t(8113),c=i.process,u=i.Deno,s=c&&c.versions||u&&u.version,l=s&&s.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),e.exports=o},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(e,r,t)=>{var n=t(7854),o=t(1236).f,i=t(8880),a=t(1320),c=t(3505),u=t(9920),s=t(4705);e.exports=function(e,r){var t,l,f,p,d,v=e.target,h=e.global,y=e.stat;if(t=h?n:y?n[v]||c(v,{}):(n[v]||{}).prototype)for(l in r){if(p=r[l],f=e.noTargetGet?(d=o(t,l))&&d.value:t[l],!s(h?l:v+(y?".":"#")+l,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;u(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(t,l,p,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:(e,r,t)=>{var n=t(4374),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},9974:(e,r,t)=>{var n=t(1702),o=t(9662),i=t(4374),a=n(n.bind);e.exports=function(e,r){return o(e),void 0===r?e:i?a(e,r):function(){return e.apply(r,arguments)}}},4374:(e,r,t)=>{var n=t(7293);e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},6916:(e,r,t)=>{var n=t(4374),o=Function.prototype.call;e.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},6530:(e,r,t)=>{var n=t(9781),o=t(2597),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,c=o(i,"name"),u=c&&"something"===function(){}.name,s=c&&(!n||n&&a(i,"name").configurable);e.exports={EXISTS:c,PROPER:u,CONFIGURABLE:s}},1702:(e,r,t)=>{var n=t(4374),o=Function.prototype,i=o.bind,a=o.call,c=n&&i.bind(a,a);e.exports=n?function(e){return e&&c(e)}:function(e){return e&&function(){return a.apply(e,arguments)}}},5005:(e,r,t)=>{var n=t(7854),o=t(614),i=function(e){return o(e)?e:void 0};e.exports=function(e,r){return arguments.length<2?i(n[e]):n[e]&&n[e][r]}},1246:(e,r,t)=>{var n=t(648),o=t(8173),i=t(7497),a=t(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,a)||o(e,"@@iterator")||i[n(e)]}},8554:(e,r,t)=>{var n=t(7854),o=t(6916),i=t(9662),a=t(9670),c=t(6330),u=t(1246),s=n.TypeError;e.exports=function(e,r){var t=arguments.length<2?u(e):r;if(i(t))return a(o(t,e));throw s(c(e)+" is not iterable")}},8173:(e,r,t)=>{var n=t(9662);e.exports=function(e,r){var t=e[r];return null==t?void 0:n(t)}},7854:(e,r,t)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t.g&&t.g)||function(){return this}()||Function("return this")()},2597:(e,r,t)=>{var n=t(1702),o=t(7908),i=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,r){return i(o(e),r)}},3501:e=>{e.exports={}},490:(e,r,t)=>{var n=t(5005);e.exports=n("document","documentElement")},4664:(e,r,t)=>{var n=t(9781),o=t(7293),i=t(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(e,r,t)=>{var n=t(7854),o=t(1702),i=t(7293),a=t(4326),c=n.Object,u=o("".split);e.exports=i((function(){return!c("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?u(e,""):c(e)}:c},2788:(e,r,t)=>{var n=t(1702),o=t(614),i=t(5465),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},9909:(e,r,t)=>{var n,o,i,a=t(8536),c=t(7854),u=t(1702),s=t(111),l=t(8880),f=t(2597),p=t(5465),d=t(6200),v=t(3501),h="Object already initialized",y=c.TypeError,g=c.WeakMap;if(a||p.state){var m=p.state||(p.state=new g),b=u(m.get),x=u(m.has),w=u(m.set);n=function(e,r){if(x(m,e))throw new y(h);return r.facade=e,w(m,e,r),r},o=function(e){return b(m,e)||{}},i=function(e){return x(m,e)}}else{var S=d("state");v[S]=!0,n=function(e,r){if(f(e,S))throw new y(h);return r.facade=e,l(e,S,r),r},o=function(e){return f(e,S)?e[S]:{}},i=function(e){return f(e,S)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(r){var t;if(!s(r)||(t=o(r)).type!==e)throw y("Incompatible receiver, "+e+" required");return t}}}},7659:(e,r,t)=>{var n=t(5112),o=t(7497),i=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},3157:(e,r,t)=>{var n=t(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},614:e=>{e.exports=function(e){return"function"==typeof e}},4411:(e,r,t)=>{var n=t(1702),o=t(7293),i=t(614),a=t(648),c=t(5005),u=t(2788),s=function(){},l=[],f=c("Reflect","construct"),p=/^\s*(?:class|function)\b/,d=n(p.exec),v=!p.exec(s),h=function(e){if(!i(e))return!1;try{return f(s,l,e),!0}catch(e){return!1}},y=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return v||!!d(p,u(e))}catch(e){return!0}};y.sham=!0,e.exports=!f||o((function(){var e;return h(h.call)||!h(Object)||!h((function(){e=!0}))||e}))?y:h},4705:(e,r,t)=>{var n=t(7293),o=t(614),i=/#|\.prototype\./,a=function(e,r){var t=u[c(e)];return t==l||t!=s&&(o(r)?n(r):!!r)},c=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=a.data={},s=a.NATIVE="N",l=a.POLYFILL="P";e.exports=a},111:(e,r,t)=>{var n=t(614);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},1913:e=>{e.exports=!1},2190:(e,r,t)=>{var n=t(7854),o=t(5005),i=t(614),a=t(7976),c=t(3307),u=n.Object;e.exports=c?function(e){return"symbol"==typeof e}:function(e){var r=o("Symbol");return i(r)&&a(r.prototype,u(e))}},9212:(e,r,t)=>{var n=t(6916),o=t(9670),i=t(8173);e.exports=function(e,r,t){var a,c;o(e);try{if(!(a=i(e,"return"))){if("throw"===r)throw t;return t}a=n(a,e)}catch(e){c=!0,a=e}if("throw"===r)throw t;if(c)throw a;return o(a),t}},3383:(e,r,t)=>{"use strict";var n,o,i,a=t(7293),c=t(614),u=t(30),s=t(9518),l=t(1320),f=t(5112),p=t(1913),d=f("iterator"),v=!1;[].keys&&("next"in(i=[].keys())?(o=s(s(i)))!==Object.prototype&&(n=o):v=!0),null==n||a((function(){var e={};return n[d].call(e)!==e}))?n={}:p&&(n=u(n)),c(n[d])||l(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:v}},7497:e=>{e.exports={}},6244:(e,r,t)=>{var n=t(7466);e.exports=function(e){return n(e.length)}},133:(e,r,t)=>{var n=t(7392),o=t(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},8536:(e,r,t)=>{var n=t(7854),o=t(614),i=t(2788),a=n.WeakMap;e.exports=o(a)&&/native code/.test(i(a))},30:(e,r,t)=>{var n,o=t(9670),i=t(6048),a=t(748),c=t(3501),u=t(490),s=t(317),l=t(6200)("IE_PROTO"),f=function(){},p=function(e){return"<script>"+e+"<\/script>"},d=function(e){e.write(p("")),e.close();var r=e.parentWindow.Object;return e=null,r},v=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,r;v="undefined"!=typeof document?document.domain&&n?d(n):((r=s("iframe")).style.display="none",u.appendChild(r),r.src=String("javascript:"),(e=r.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F):d(n);for(var t=a.length;t--;)delete v.prototype[a[t]];return v()};c[l]=!0,e.exports=Object.create||function(e,r){var t;return null!==e?(f.prototype=o(e),t=new f,f.prototype=null,t[l]=e):t=v(),void 0===r?t:i.f(t,r)}},6048:(e,r,t)=>{var n=t(9781),o=t(3353),i=t(3070),a=t(9670),c=t(5656),u=t(1956);r.f=n&&!o?Object.defineProperties:function(e,r){a(e);for(var t,n=c(r),o=u(r),s=o.length,l=0;s>l;)i.f(e,t=o[l++],n[t]);return e}},3070:(e,r,t)=>{var n=t(7854),o=t(9781),i=t(4664),a=t(3353),c=t(9670),u=t(4948),s=n.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor;r.f=o?a?function(e,r,t){if(c(e),r=u(r),c(t),"function"==typeof e&&"prototype"===r&&"value"in t&&"writable"in t&&!t.writable){var n=f(e,r);n&&n.writable&&(e[r]=t.value,t={configurable:"configurable"in t?t.configurable:n.configurable,enumerable:"enumerable"in t?t.enumerable:n.enumerable,writable:!1})}return l(e,r,t)}:l:function(e,r,t){if(c(e),r=u(r),c(t),i)try{return l(e,r,t)}catch(e){}if("get"in t||"set"in t)throw s("Accessors not supported");return"value"in t&&(e[r]=t.value),e}},1236:(e,r,t)=>{var n=t(9781),o=t(6916),i=t(5296),a=t(9114),c=t(5656),u=t(4948),s=t(2597),l=t(4664),f=Object.getOwnPropertyDescriptor;r.f=n?f:function(e,r){if(e=c(e),r=u(r),l)try{return f(e,r)}catch(e){}if(s(e,r))return a(!o(i.f,e,r),e[r])}},1156:(e,r,t)=>{var n=t(4326),o=t(5656),i=t(8006).f,a=t(1589),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return c&&"Window"==n(e)?function(e){try{return i(e)}catch(e){return a(c)}}(e):i(o(e))}},8006:(e,r,t)=>{var n=t(6324),o=t(748).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,r)=>{r.f=Object.getOwnPropertySymbols},9518:(e,r,t)=>{var n=t(7854),o=t(2597),i=t(614),a=t(7908),c=t(6200),u=t(8544),s=c("IE_PROTO"),l=n.Object,f=l.prototype;e.exports=u?l.getPrototypeOf:function(e){var r=a(e);if(o(r,s))return r[s];var t=r.constructor;return i(t)&&r instanceof t?t.prototype:r instanceof l?f:null}},7976:(e,r,t)=>{var n=t(1702);e.exports=n({}.isPrototypeOf)},6324:(e,r,t)=>{var n=t(1702),o=t(2597),i=t(5656),a=t(1318).indexOf,c=t(3501),u=n([].push);e.exports=function(e,r){var t,n=i(e),s=0,l=[];for(t in n)!o(c,t)&&o(n,t)&&u(l,t);for(;r.length>s;)o(n,t=r[s++])&&(~a(l,t)||u(l,t));return l}},1956:(e,r,t)=>{var n=t(6324),o=t(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,r)=>{"use strict";var t={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!t.call({1:2},1);r.f=o?function(e){var r=n(this,e);return!!r&&r.enumerable}:t},7674:(e,r,t)=>{var n=t(1702),o=t(9670),i=t(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,r=!1,t={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),r=t instanceof Array}catch(e){}return function(t,n){return o(t),i(n),r?e(t,n):t.__proto__=n,t}}():void 0)},288:(e,r,t)=>{"use strict";var n=t(1694),o=t(648);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(e,r,t)=>{var n=t(7854),o=t(6916),i=t(614),a=t(111),c=n.TypeError;e.exports=function(e,r){var t,n;if("string"===r&&i(t=e.toString)&&!a(n=o(t,e)))return n;if(i(t=e.valueOf)&&!a(n=o(t,e)))return n;if("string"!==r&&i(t=e.toString)&&!a(n=o(t,e)))return n;throw c("Can't convert object to primitive value")}},3887:(e,r,t)=>{var n=t(5005),o=t(1702),i=t(8006),a=t(5181),c=t(9670),u=o([].concat);e.exports=n("Reflect","ownKeys")||function(e){var r=i.f(c(e)),t=a.f;return t?u(r,t(e)):r}},857:(e,r,t)=>{var n=t(7854);e.exports=n},1320:(e,r,t)=>{var n=t(7854),o=t(614),i=t(2597),a=t(8880),c=t(3505),u=t(2788),s=t(9909),l=t(6530).CONFIGURABLE,f=s.get,p=s.enforce,d=String(String).split("String");(e.exports=function(e,r,t,u){var s,f=!!u&&!!u.unsafe,v=!!u&&!!u.enumerable,h=!!u&&!!u.noTargetGet,y=u&&void 0!==u.name?u.name:r;o(t)&&("Symbol("===String(y).slice(0,7)&&(y="["+String(y).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||l&&t.name!==y)&&a(t,"name",y),(s=p(t)).source||(s.source=d.join("string"==typeof y?y:""))),e!==n?(f?!h&&e[r]&&(v=!0):delete e[r],v?e[r]=t:a(e,r,t)):v?e[r]=t:c(r,t)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||u(this)}))},2261:(e,r,t)=>{"use strict";var n,o,i=t(6916),a=t(1702),c=t(1340),u=t(7066),s=t(2999),l=t(2309),f=t(30),p=t(9909).get,d=t(9441),v=t(7168),h=l("native-string-replace",String.prototype.replace),y=RegExp.prototype.exec,g=y,m=a("".charAt),b=a("".indexOf),x=a("".replace),w=a("".slice),S=(o=/b*/g,i(y,n=/a/,"a"),i(y,o,"a"),0!==n.lastIndex||0!==o.lastIndex),O=s.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(S||E||O||d||v)&&(g=function(e){var r,t,n,o,a,s,l,d=this,v=p(d),A=c(e),j=v.raw;if(j)return j.lastIndex=d.lastIndex,r=i(g,j,A),d.lastIndex=j.lastIndex,r;var I=v.groups,k=O&&d.sticky,_=i(u,d),P=d.source,T=0,L=A;if(k&&(_=x(_,"y",""),-1===b(_,"g")&&(_+="g"),L=w(A,d.lastIndex),d.lastIndex>0&&(!d.multiline||d.multiline&&"\n"!==m(A,d.lastIndex-1))&&(P="(?: "+P+")",L=" "+L,T++),t=new RegExp("^(?:"+P+")",_)),E&&(t=new RegExp("^"+P+"$(?!\\s)",_)),S&&(n=d.lastIndex),o=i(y,k?t:d,L),k?o?(o.input=w(o.input,T),o[0]=w(o[0],T),o.index=d.lastIndex,d.lastIndex+=o[0].length):d.lastIndex=0:S&&o&&(d.lastIndex=d.global?o.index+o[0].length:n),E&&o&&o.length>1&&i(h,o[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&I)for(o.groups=s=f(null),a=0;a<I.length;a++)s[(l=I[a])[0]]=o[l[1]];return o}),e.exports=g},7066:(e,r,t)=>{"use strict";var n=t(9670);e.exports=function(){var e=n(this),r="";return e.global&&(r+="g"),e.ignoreCase&&(r+="i"),e.multiline&&(r+="m"),e.dotAll&&(r+="s"),e.unicode&&(r+="u"),e.sticky&&(r+="y"),r}},2999:(e,r,t)=>{var n=t(7293),o=t(7854).RegExp,i=n((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),c=i||n((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:c,MISSED_STICKY:a,UNSUPPORTED_Y:i}},9441:(e,r,t)=>{var n=t(7293),o=t(7854).RegExp;e.exports=n((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},7168:(e,r,t)=>{var n=t(7293),o=t(7854).RegExp;e.exports=n((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},4488:(e,r,t)=>{var n=t(7854).TypeError;e.exports=function(e){if(null==e)throw n("Can't call method on "+e);return e}},3505:(e,r,t)=>{var n=t(7854),o=Object.defineProperty;e.exports=function(e,r){try{o(n,e,{value:r,configurable:!0,writable:!0})}catch(t){n[e]=r}return r}},8003:(e,r,t)=>{var n=t(3070).f,o=t(2597),i=t(5112)("toStringTag");e.exports=function(e,r,t){e&&!t&&(e=e.prototype),e&&!o(e,i)&&n(e,i,{configurable:!0,value:r})}},6200:(e,r,t)=>{var n=t(2309),o=t(9711),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,r,t)=>{var n=t(7854),o=t(3505),i="__core-js_shared__",a=n[i]||o(i,{});e.exports=a},2309:(e,r,t)=>{var n=t(1913),o=t(5465);(e.exports=function(e,r){return o[e]||(o[e]=void 0!==r?r:{})})("versions",[]).push({version:"3.20.3",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.20.3/LICENSE",source:"https://github.com/zloirock/core-js"})},8710:(e,r,t)=>{var n=t(1702),o=t(9303),i=t(1340),a=t(4488),c=n("".charAt),u=n("".charCodeAt),s=n("".slice),l=function(e){return function(r,t){var n,l,f=i(a(r)),p=o(t),d=f.length;return p<0||p>=d?e?"":void 0:(n=u(f,p))<55296||n>56319||p+1===d||(l=u(f,p+1))<56320||l>57343?e?c(f,p):n:e?s(f,p,p+2):l-56320+(n-55296<<10)+65536}};e.exports={codeAt:l(!1),charAt:l(!0)}},6091:(e,r,t)=>{var n=t(6530).PROPER,o=t(7293),i=t(1361);e.exports=function(e){return o((function(){return!!i[e]()||"​᠎"!=="​᠎"[e]()||n&&i[e].name!==e}))}},3111:(e,r,t)=>{var n=t(1702),o=t(4488),i=t(1340),a=t(1361),c=n("".replace),u="["+a+"]",s=RegExp("^"+u+u+"*"),l=RegExp(u+u+"*$"),f=function(e){return function(r){var t=i(o(r));return 1&e&&(t=c(t,s,"")),2&e&&(t=c(t,l,"")),t}};e.exports={start:f(1),end:f(2),trim:f(3)}},1400:(e,r,t)=>{var n=t(9303),o=Math.max,i=Math.min;e.exports=function(e,r){var t=n(e);return t<0?o(t+r,0):i(t,r)}},5656:(e,r,t)=>{var n=t(8361),o=t(4488);e.exports=function(e){return n(o(e))}},9303:e=>{var r=Math.ceil,t=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?t:r)(n)}},7466:(e,r,t)=>{var n=t(9303),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,r,t)=>{var n=t(7854),o=t(4488),i=n.Object;e.exports=function(e){return i(o(e))}},7593:(e,r,t)=>{var n=t(7854),o=t(6916),i=t(111),a=t(2190),c=t(8173),u=t(2140),s=t(5112),l=n.TypeError,f=s("toPrimitive");e.exports=function(e,r){if(!i(e)||a(e))return e;var t,n=c(e,f);if(n){if(void 0===r&&(r="default"),t=o(n,e,r),!i(t)||a(t))return t;throw l("Can't convert object to primitive value")}return void 0===r&&(r="number"),u(e,r)}},4948:(e,r,t)=>{var n=t(7593),o=t(2190);e.exports=function(e){var r=n(e,"string");return o(r)?r:r+""}},1694:(e,r,t)=>{var n={};n[t(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},1340:(e,r,t)=>{var n=t(7854),o=t(648),i=n.String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},6330:(e,r,t)=>{var n=t(7854).String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},9711:(e,r,t)=>{var n=t(1702),o=0,i=Math.random(),a=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},3307:(e,r,t)=>{var n=t(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:(e,r,t)=>{var n=t(9781),o=t(7293);e.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},6061:(e,r,t)=>{var n=t(5112);r.f=n},5112:(e,r,t)=>{var n=t(7854),o=t(2309),i=t(2597),a=t(9711),c=t(133),u=t(3307),s=o("wks"),l=n.Symbol,f=l&&l.for,p=u?l:l&&l.withoutSetter||a;e.exports=function(e){if(!i(s,e)||!c&&"string"!=typeof s[e]){var r="Symbol."+e;c&&i(l,e)?s[e]=l[e]:s[e]=u&&f?f(r):p(r)}return s[e]}},1361:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},1038:(e,r,t)=>{var n=t(2109),o=t(8457);n({target:"Array",stat:!0,forced:!t(7072)((function(e){Array.from(e)}))},{from:o})},6992:(e,r,t)=>{"use strict";var n=t(5656),o=t(1223),i=t(7497),a=t(9909),c=t(3070).f,u=t(654),s=t(1913),l=t(9781),f="Array Iterator",p=a.set,d=a.getterFor(f);e.exports=u(Array,"Array",(function(e,r){p(this,{type:f,target:n(e),index:0,kind:r})}),(function(){var e=d(this),r=e.target,t=e.kind,n=e.index++;return!r||n>=r.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:n,done:!1}:"values"==t?{value:r[n],done:!1}:{value:[n,r[n]],done:!1}}),"values");var v=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!s&&l&&"values"!==v.name)try{c(v,"name",{value:"values"})}catch(e){}},7042:(e,r,t)=>{"use strict";var n=t(2109),o=t(7854),i=t(3157),a=t(4411),c=t(111),u=t(1400),s=t(6244),l=t(5656),f=t(6135),p=t(5112),d=t(1194),v=t(206),h=d("slice"),y=p("species"),g=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!h},{slice:function(e,r){var t,n,o,p=l(this),d=s(p),h=u(e,d),b=u(void 0===r?d:r,d);if(i(p)&&(t=p.constructor,(a(t)&&(t===g||i(t.prototype))||c(t)&&null===(t=t[y]))&&(t=void 0),t===g||void 0===t))return v(p,h,b);for(n=new(void 0===t?g:t)(m(b-h,0)),o=0;h<b;h++,o++)h in p&&f(n,o,p[h]);return n.length=o,n}})},8309:(e,r,t)=>{var n=t(9781),o=t(6530).EXISTS,i=t(1702),a=t(3070).f,c=Function.prototype,u=i(c.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,l=i(s.exec);n&&!o&&a(c,"name",{configurable:!0,get:function(){try{return l(s,u(this))[1]}catch(e){return""}}})},1539:(e,r,t)=>{var n=t(1694),o=t(1320),i=t(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},4916:(e,r,t)=>{"use strict";var n=t(2109),o=t(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},8783:(e,r,t)=>{"use strict";var n=t(8710).charAt,o=t(1340),i=t(9909),a=t(654),c="String Iterator",u=i.set,s=i.getterFor(c);a(String,"String",(function(e){u(this,{type:c,string:o(e),index:0})}),(function(){var e,r=s(this),t=r.string,o=r.index;return o>=t.length?{value:void 0,done:!0}:(e=n(t,o),r.index+=e.length,{value:e,done:!1})}))},3210:(e,r,t)=>{"use strict";var n=t(2109),o=t(3111).trim;n({target:"String",proto:!0,forced:t(6091)("trim")},{trim:function(){return o(this)}})},1817:(e,r,t)=>{"use strict";var n=t(2109),o=t(9781),i=t(7854),a=t(1702),c=t(2597),u=t(614),s=t(7976),l=t(1340),f=t(3070).f,p=t(9920),d=i.Symbol,v=d&&d.prototype;if(o&&u(d)&&(!("description"in v)||void 0!==d().description)){var h={},y=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:l(arguments[0]),r=s(v,this)?new d(e):void 0===e?d():d(e);return""===e&&(h[r]=!0),r};p(y,d),y.prototype=v,v.constructor=y;var g="Symbol(test)"==String(d("test")),m=a(v.toString),b=a(v.valueOf),x=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),S=a("".slice);f(v,"description",{configurable:!0,get:function(){var e=b(this),r=m(e);if(c(h,e))return"";var t=g?S(r,7,-1):w(r,x,"$1");return""===t?void 0:t}}),n({global:!0,forced:!0},{Symbol:y})}},2165:(e,r,t)=>{t(7235)("iterator")},2526:(e,r,t)=>{"use strict";var n=t(2109),o=t(7854),i=t(5005),a=t(2104),c=t(6916),u=t(1702),s=t(1913),l=t(9781),f=t(133),p=t(7293),d=t(2597),v=t(3157),h=t(614),y=t(111),g=t(7976),m=t(2190),b=t(9670),x=t(7908),w=t(5656),S=t(4948),O=t(1340),E=t(9114),A=t(30),j=t(1956),I=t(8006),k=t(1156),_=t(5181),P=t(1236),T=t(3070),L=t(6048),C=t(5296),D=t(206),R=t(1320),H=t(2309),N=t(6200),F=t(3501),M=t(9711),q=t(5112),G=t(6061),B=t(7235),U=t(8003),$=t(9909),W=t(2092).forEach,z=N("hidden"),V="Symbol",K=q("toPrimitive"),Y=$.set,X=$.getterFor(V),J=Object.prototype,Q=o.Symbol,Z=Q&&Q.prototype,ee=o.TypeError,re=o.QObject,te=i("JSON","stringify"),ne=P.f,oe=T.f,ie=k.f,ae=C.f,ce=u([].push),ue=H("symbols"),se=H("op-symbols"),le=H("string-to-symbol-registry"),fe=H("symbol-to-string-registry"),pe=H("wks"),de=!re||!re.prototype||!re.prototype.findChild,ve=l&&p((function(){return 7!=A(oe({},"a",{get:function(){return oe(this,"a",{value:7}).a}})).a}))?function(e,r,t){var n=ne(J,r);n&&delete J[r],oe(e,r,t),n&&e!==J&&oe(J,r,n)}:oe,he=function(e,r){var t=ue[e]=A(Z);return Y(t,{type:V,tag:e,description:r}),l||(t.description=r),t},ye=function(e,r,t){e===J&&ye(se,r,t),b(e);var n=S(r);return b(t),d(ue,n)?(t.enumerable?(d(e,z)&&e[z][n]&&(e[z][n]=!1),t=A(t,{enumerable:E(0,!1)})):(d(e,z)||oe(e,z,E(1,{})),e[z][n]=!0),ve(e,n,t)):oe(e,n,t)},ge=function(e,r){b(e);var t=w(r),n=j(t).concat(we(t));return W(n,(function(r){l&&!c(me,t,r)||ye(e,r,t[r])})),e},me=function(e){var r=S(e),t=c(ae,this,r);return!(this===J&&d(ue,r)&&!d(se,r))&&(!(t||!d(this,r)||!d(ue,r)||d(this,z)&&this[z][r])||t)},be=function(e,r){var t=w(e),n=S(r);if(t!==J||!d(ue,n)||d(se,n)){var o=ne(t,n);return!o||!d(ue,n)||d(t,z)&&t[z][n]||(o.enumerable=!0),o}},xe=function(e){var r=ie(w(e)),t=[];return W(r,(function(e){d(ue,e)||d(F,e)||ce(t,e)})),t},we=function(e){var r=e===J,t=ie(r?se:w(e)),n=[];return W(t,(function(e){!d(ue,e)||r&&!d(J,e)||ce(n,ue[e])})),n};if(f||(R(Z=(Q=function(){if(g(Z,this))throw ee("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?O(arguments[0]):void 0,r=M(e),t=function(e){this===J&&c(t,se,e),d(this,z)&&d(this[z],r)&&(this[z][r]=!1),ve(this,r,E(1,e))};return l&&de&&ve(J,r,{configurable:!0,set:t}),he(r,e)}).prototype,"toString",(function(){return X(this).tag})),R(Q,"withoutSetter",(function(e){return he(M(e),e)})),C.f=me,T.f=ye,L.f=ge,P.f=be,I.f=k.f=xe,_.f=we,G.f=function(e){return he(q(e),e)},l&&(oe(Z,"description",{configurable:!0,get:function(){return X(this).description}}),s||R(J,"propertyIsEnumerable",me,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!f,sham:!f},{Symbol:Q}),W(j(pe),(function(e){B(e)})),n({target:V,stat:!0,forced:!f},{for:function(e){var r=O(e);if(d(le,r))return le[r];var t=Q(r);return le[r]=t,fe[t]=r,t},keyFor:function(e){if(!m(e))throw ee(e+" is not a symbol");if(d(fe,e))return fe[e]},useSetter:function(){de=!0},useSimple:function(){de=!1}}),n({target:"Object",stat:!0,forced:!f,sham:!l},{create:function(e,r){return void 0===r?A(e):ge(A(e),r)},defineProperty:ye,defineProperties:ge,getOwnPropertyDescriptor:be}),n({target:"Object",stat:!0,forced:!f},{getOwnPropertyNames:xe,getOwnPropertySymbols:we}),n({target:"Object",stat:!0,forced:p((function(){_.f(1)}))},{getOwnPropertySymbols:function(e){return _.f(x(e))}}),te&&n({target:"JSON",stat:!0,forced:!f||p((function(){var e=Q();return"[null]"!=te([e])||"{}"!=te({a:e})||"{}"!=te(Object(e))}))},{stringify:function(e,r,t){var n=D(arguments),o=r;if((y(r)||void 0!==e)&&!m(e))return v(r)||(r=function(e,r){if(h(o)&&(r=c(o,this,e,r)),!m(r))return r}),n[1]=r,a(te,null,n)}}),!Z[K]){var Se=Z.valueOf;R(Z,K,(function(e){return c(Se,this)}))}U(Q,V),F[z]=!0},3948:(e,r,t)=>{var n=t(7854),o=t(8324),i=t(8509),a=t(6992),c=t(8880),u=t(5112),s=u("iterator"),l=u("toStringTag"),f=a.values,p=function(e,r){if(e){if(e[s]!==f)try{c(e,s,f)}catch(r){e[s]=f}if(e[l]||c(e,l,r),o[r])for(var t in a)if(e[t]!==a[t])try{c(e,t,a[t])}catch(r){e[t]=a[t]}}};for(var d in o)p(n[d]&&n[d].prototype,d);p(i,"DOMTokenList")},4783:(e,r,t)=>{"use strict";var n=t(5618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function u(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&u(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),c;var t,f,p=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=p(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e,{stripWWW:!1}),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(u(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,f=0,function(){var e=this,r=arguments,n=function(){return t.apply(e,r)};clearTimeout(f),f=setTimeout(n,50)}}},5618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},8177:(e,r,t)=>{"use strict";var n=t(4783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},u={};function s(e){var r=u[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var t=u[e]={id:e,exports:{}};try{var n={id:e,module:t,factory:c[e],require:s};s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require)}catch(e){throw t.error=e,e}return t.exports}s.m=c,s.c=u,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"1132f5ac979ec64c653a",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ahj-workers-hasher:",s.l=(t,n,o,i)=>{if(e[t])e[t].push(n);else{var a,c;if(void 0!==o)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var f=u[l];if(f.getAttribute("src")==t||f.getAttribute("data-webpack")==r+o){a=f;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",r+o),a.src=t),e[t]=[n];var p=(r,n)=>{a.onerror=a.onload=null,clearTimeout(d);var o=e[t];if(delete e[t],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),r)return r(n)},d=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,r,t,n,o={},i=s.c,a=[],c=[],u="idle";function l(e){u=e;for(var r=[],t=0;t<c.length;t++)r[t]=c[t].call(null,e);return Promise.all(r)}function f(e){if(0===r.length)return e();var t=r;return r=[],Promise.all(t).then((function(){return f(e)}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return l("check").then(s.hmrM).then((function(n){return n?l("prepare").then((function(){var o=[];return r=[],t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,r){return s.hmrC[r](n.c,n.r,n.m,e,t,o),e}),[])).then((function(){return f((function(){return e?v(e):l("ready").then((function(){return o}))}))}))})):l(h()?"ready":"idle").then((function(){return null}))}))}function d(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):v(e)}function v(e){e=e||{},h();var r=t.map((function(r){return r(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return l("abort").then((function(){throw o[0]}));var i=l("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var a,c=l("apply"),u=function(e){a||(a=e)},s=[];return r.forEach((function(e){if(e.apply){var r=e.apply(u);if(r)for(var t=0;t<r.length;t++)s.push(r[t])}})),Promise.all([i,c]).then((function(){return a?l("fail").then((function(){throw a})):n?v(e).then((function(e){return s.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):l("idle").then((function(){return s}))}))}function h(){if(n)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(r){s.hmrI[e](r,t)}))})),n=void 0,!0}s.hmrD=o,s.i.push((function(v){var h,y,g,m,b=v.module,x=function(t,n){var o=i[n];if(!o)return t;var c=function(r){if(o.hot.active){if(i[r]){var c=i[r].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+n),a=[];return t(r)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var p in t)Object.prototype.hasOwnProperty.call(t,p)&&"e"!==p&&Object.defineProperty(c,p,s(p));return c.e=function(e){return function(e){switch(u){case"ready":return l("prepare"),r.push(e),f((function(){return l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(t.e(e))},c}(v.require,v.id);b.hot=(h=v.id,y=b,m={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==h,_requireSelf:function(){a=y.parents.slice(),e=g?void 0:h,s(h)},active:!0,accept:function(e,r,t){if(void 0===e)m._selfAccepted=!0;else if("function"==typeof e)m._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)m._acceptedDependencies[e[n]]=r||function(){},m._acceptedErrorHandlers[e[n]]=t;else m._acceptedDependencies[e]=r||function(){},m._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)m._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)m._declinedDependencies[e[r]]=!0;else m._declinedDependencies[e]=!0},dispose:function(e){m._disposeHandlers.push(e)},addDisposeHandler:function(e){m._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=m._disposeHandlers.indexOf(e);r>=0&&m._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](h,t)})),l("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](h,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(h)}},check:p,apply:d,status:function(e){if(!e)return u;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:o[h]},e=void 0,m),b.parents=a,b.children=[],a=[],v.require=x})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||r,u=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");u.code="CSS_CHUNK_LOAD_FAILED",u.type=a,u.request=c,o.parentNode.removeChild(o),n(u)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(a=t[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,c,u,l,f)=>{l.push(a),e.forEach((e=>{var r=s.miniCssF(e),a=s.p+r,c=n(r,a);c&&u.push(new Promise(((r,n)=>{var u=t(e,a,(()=>{u.as="style",u.rel="preload",r()}),n);o.push(c),i.push(u)})))}))},(()=>{var e,r,t,n,o=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},i={};function a(e){return new Promise(((r,t)=>{i[e]=r;var n=s.p+s.hu(e),o=new Error;s.l(n,(r=>{if(i[e]){i[e]=void 0;var n=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,t(o)}}))}))}function c(i){function a(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,u=s.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<u.parents.length;l++){var f=u.parents[l],p=s.c[f];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===r.indexOf(f)&&(p.hot._acceptedDependencies[i]?(t[f]||(t[f]=[]),c(t[f],[i])):(delete t[f],r.push(f),n.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,e=void 0;var u={},l=[],f={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var d in r)if(s.o(r,d)){var v,h=r[d],y=!1,g=!1,m=!1,b="";switch((v=h?a(d):{type:"disposed",moduleId:d}).chain&&(b="\nUpdate propagation: "+v.chain.join(" -> ")),v.type){case"self-declined":i.onDeclined&&i.onDeclined(v),i.ignoreDeclined||(y=new Error("Aborted because of self decline: "+v.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(v),i.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+v.moduleId+" in "+v.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(v),i.ignoreUnaccepted||(y=new Error("Aborted because "+d+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(v),g=!0;break;case"disposed":i.onDisposed&&i.onDisposed(v),m=!0;break;default:throw new Error("Unexception type "+v.type)}if(y)return{error:y};if(g)for(d in f[d]=h,c(l,v.outdatedModules),v.outdatedDependencies)s.o(v.outdatedDependencies,d)&&(u[d]||(u[d]=[]),c(u[d],v.outdatedDependencies[d]));m&&(c(l,[v.moduleId]),f[d]=p)}r=void 0;for(var x,w=[],S=0;S<l.length;S++){var O=l[S],E=s.c[O];E&&(E.hot._selfAccepted||E.hot._main)&&f[O]!==p&&!E.hot._selfInvalidated&&w.push({module:O,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete o[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var i=n.pop(),a=s.c[i];if(a){var c={},f=a.hot._disposeHandlers;for(S=0;S<f.length;S++)f[S].call(null,c);for(s.hmrD[i]=c,a.hot.active=!1,delete s.c[i],delete u[i],S=0;S<a.children.length;S++){var p=s.c[a.children[S]];p&&(e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1)}}}for(var d in u)if(s.o(u,d)&&(a=s.c[d]))for(x=u[d],S=0;S<x.length;S++)r=x[S],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(e){for(var r in f)s.o(f,r)&&(s.m[r]=f[r]);for(var t=0;t<n.length;t++)n[t](s);for(var o in u)if(s.o(u,o)){var a=s.c[o];if(a){x=u[o];for(var c=[],p=[],d=[],v=0;v<x.length;v++){var h=x[v],y=a.hot._acceptedDependencies[h],g=a.hot._acceptedErrorHandlers[h];if(y){if(-1!==c.indexOf(y))continue;c.push(y),p.push(g),d.push(h)}}for(var m=0;m<c.length;m++)try{c[m].call(null,x)}catch(r){if("function"==typeof p[m])try{p[m](r,{moduleId:o,dependencyId:d[m]})}catch(t){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:d[m],error:t,originalError:r}),i.ignoreErrored||(e(t),e(r))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[m],error:r}),i.ignoreErrored||e(r)}}}for(var b=0;b<w.length;b++){var S=w[b],O=S.module;try{S.require(O)}catch(r){if("function"==typeof S.errorHandler)try{S.errorHandler(r,{moduleId:O,module:s.c[O]})}catch(t){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:O,error:t,originalError:r}),i.ignoreErrored||(e(t),e(r))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:O,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdateahj_workers_hasher=(e,t,o)=>{for(var a in t)s.o(t,a)&&(r[a]=t[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},s.hmrI.jsonp=function(e,o){r||(r={},n=[],t=[],o.push(c)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(i,u,l,f,p,d){p.push(c),e={},t=u,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),n=[],i.forEach((function(r){s.o(o,r)&&void 0!==o[r]&&(f.push(a(r)),e[r]=!0)})),s.f&&(s.f.jsonpHmr=function(r,t){e&&!s.o(e,r)&&s.o(o,r)&&void 0!==o[r]&&(t.push(a(r)),e[r]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(3371)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBSzBvQixFQUFnQnhILElBQzlCaUgsRUFBb0JqSCxJQUFXLE1BTW5DWCxFQUFvQm9ELEtBQU8sS0FDMUIsR0FBcUIsb0JBQVY2SCxNQUF1QixNQUFNLElBQUk5SCxNQUFNLHNDQUNsRCxPQUFPOEgsTUFBTWpMLEVBQW9CeUcsRUFBSXpHLEVBQW9CYyxRQUFRa0MsTUFBTWtJLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTL0UsT0FBWixDQUNBLElBQUkrRSxFQUFTQyxHQUFJLE1BQU0sSUFBSWhJLE1BQU0sbUNBQXFDK0gsRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csYSxHQ25mUXJMLEVBQW9CLE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vc3JjL2pzL2hhc2hlci5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL3NyYy9qcy93ZWIud29ya2VyLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1jbG9zZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ub3JtYWxpemUtdXJsLmpzIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci8uL3NyYy9jc3Mvc3R5bGUuY3NzPzZiN2IiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9haGotd29ya2Vycy1oYXNoZXIvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYWhqLXdvcmtlcnMtaGFzaGVyL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2Foai13b3JrZXJzLWhhc2hlci93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiYWhqLXdvcmtlcnMtaGFzaGVyOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwidmFyIGNyZWF0ZVN0eWxlc2hlZXQgPSAoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHR2YXIgbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cdGxpbmtUYWcudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0dmFyIG9uTGlua0NvbXBsZXRlID0gKGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzLlxuXHRcdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gbnVsbDtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnKSB7XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHR2YXIgcmVhbEhyZWYgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LmhyZWYgfHwgZnVsbGhyZWY7XG5cdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlYWxIcmVmICsgXCIpXCIpO1xuXHRcdFx0ZXJyLmNvZGUgPSBcIkNTU19DSFVOS19MT0FEX0ZBSUxFRFwiO1xuXHRcdFx0ZXJyLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRlcnIucmVxdWVzdCA9IHJlYWxIcmVmO1xuXHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG5cdFx0XHRyZWplY3QoZXJyKTtcblx0XHR9XG5cdH1cblx0bGlua1RhZy5vbmVycm9yID0gbGlua1RhZy5vbmxvYWQgPSBvbkxpbmtDb21wbGV0ZTtcblx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cblx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcblx0cmV0dXJuIGxpbmtUYWc7XG59O1xudmFyIGZpbmRTdHlsZXNoZWV0ID0gKGhyZWYsIGZ1bGxocmVmKSA9PiB7XG5cdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuXHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ0xpbmtUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG5cdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiB0YWc7XG5cdH1cblx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHRhZyA9IGV4aXN0aW5nU3R5bGVUYWdzW2ldO1xuXHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG5cdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gdGFnO1xuXHR9XG59O1xudmFyIGxvYWRTdHlsZXNoZWV0ID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR2YXIgaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YoY2h1bmtJZCk7XG5cdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcblx0XHRpZihmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG5cdFx0Y3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgcmVzb2x2ZSwgcmVqZWN0KTtcblx0fSk7XG59XG4vLyBubyBjaHVuayBsb2FkaW5nXG5cbnZhciBvbGRUYWdzID0gW107XG52YXIgbmV3VGFncyA9IFtdO1xudmFyIGFwcGx5SGFuZGxlciA9IChvcHRpb25zKSA9PiB7XG5cdHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2xkVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIG9sZFRhZyA9IG9sZFRhZ3NbaV07XG5cdFx0XHRpZihvbGRUYWcucGFyZW50Tm9kZSkgb2xkVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkVGFnKTtcblx0XHR9XG5cdFx0b2xkVGFncy5sZW5ndGggPSAwO1xuXHR9LCBhcHBseTogKCkgPT4ge1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBuZXdUYWdzLmxlbmd0aDsgaSsrKSBuZXdUYWdzW2ldLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRcdG5ld1RhZ3MubGVuZ3RoID0gMDtcblx0fSB9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLm1pbmlDc3MgPSAoY2h1bmtJZHMsIHJlbW92ZWRDaHVua3MsIHJlbW92ZWRNb2R1bGVzLCBwcm9taXNlcywgYXBwbHlIYW5kbGVycywgdXBkYXRlZE1vZHVsZXNMaXN0KSA9PiB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjaHVua0lkcy5mb3JFYWNoKChjaHVua0lkKSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0dmFyIG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBIYXNoZXIge1xuICBjb25zdHJ1Y3Rvcih3b3JrZXIpIHtcbiAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgICB0aGlzLmRuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kbmQnKTtcbiAgICB0aGlzLmRuZElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRuZC1pbnB1dCcpO1xuICAgIHRoaXMuY2hvaWNlQWxnb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2hvaWNlLWFsZ29yJyk7XG4gICAgdGhpcy5saXN0QWxnb3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdC1hbGdvcnMnKTtcbiAgICB0aGlzLmhhc2hUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhhc2gtY2FsYy1yZXN1bHQnKTtcbiAgICB0aGlzLmFsZ29yID0gbnVsbDtcbiAgICB0aGlzLmhhc2ggPSBudWxsO1xuICAgIHRoaXMuZmlsZSA9IG51bGw7XG4gIH1cblxuICBldmVudHMoKSB7XG4gICAgdGhpcy5jbGlja09uQWxnb3JpdGhtcygpO1xuICAgIHRoaXMuaW5wdXRGaWxlKCk7XG4gICAgdGhpcy5kcm9wRmlsZSgpO1xuICAgIHRoaXMuY2xpY2tDaG9pY2VBbGdvcml0aG1zKCk7XG4gIH1cblxuICBpbnB1dEZpbGUoKSB7XG4gICAgdGhpcy5kbmRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldikgPT4ge1xuICAgICAgY29uc3QgZmlsZSA9IGV2LnRhcmdldC5maWxlc1swXTtcbiAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gICAgICB0aGlzLnJlc3VsdENhbGNIYXNoKCk7XG4gICAgfSk7XG4gIH1cblxuICBkcm9wRmlsZSgpIHtcbiAgICB0aGlzLmRuZElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2KSA9PiB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICAgIHRoaXMuZG5kSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChldikgPT4ge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGZpbGVzID0gQXJyYXkuZnJvbShldi5kYXRhVHJhbnNmZXIuZmlsZXMpO1xuICAgICAgW3RoaXMuZmlsZV0gPSBmaWxlcztcbiAgICAgIHRoaXMucmVzdWx0Q2FsY0hhc2goKTtcbiAgICB9KTtcbiAgfVxuXG4gIHdlYldvcmtlcihmaWxlLCBhbGdvcikge1xuICAgIHRoaXMud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZXYpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyQ2FsY0hhc2goZXYuZGF0YSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXYpO1xuICAgIH0pO1xuXG4gICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgZmlsZSxcbiAgICAgIGFsZ29yLFxuICAgIH0pO1xuICB9XG5cbiAgcmVzdWx0Q2FsY0hhc2goKSB7XG4gICAgaWYgKHRoaXMuZmlsZSAhPT0gbnVsbCAmJiB0aGlzLmFsZ29yICE9PSBudWxsKSB7XG4gICAgICB0aGlzLndlYldvcmtlcih0aGlzLmZpbGUsIHRoaXMuYWxnb3IpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckNhbGNIYXNoKGhhc2gpIHtcbiAgICB0aGlzLmhhc2hUZXh0LnRleHRDb250ZW50ID0gaGFzaDtcbiAgfVxuXG4gIHJlbmRlckNoYW5nZUFsZ29yKGFsZ29yKSB7XG4gICAgdGhpcy5jaG9pY2VBbGdvci50ZXh0Q29udGVudCA9IGBIYXNoIEFsZ29yaXRobTogJHthbGdvcn1gO1xuICB9XG5cbiAgY2xpY2tPbkFsZ29yaXRobXMoKSB7XG4gICAgdGhpcy5jaG9pY2VBbGdvci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmxpc3RBbGdvci5jbGFzc0xpc3QuY29udGFpbnMoJ25vbmUnKSkge1xuICAgICAgICB0aGlzLmxpc3RBbGdvci5jbGFzc0xpc3QucmVtb3ZlKCdub25lJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpc3RBbGdvci5jbGFzc0xpc3QuYWRkKCdub25lJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbGlja0Nob2ljZUFsZ29yaXRobXMoKSB7XG4gICAgdGhpcy5saXN0QWxnb3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaSBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWxnb3ItbmFtZScpKSB7XG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGkpIHtcbiAgICAgICAgICB0aGlzLmFsZ29yID0gZXYudGFyZ2V0LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICB0aGlzLmxpc3RBbGdvci5jbGFzc0xpc3QuYWRkKCdub25lJyk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJDaGFuZ2VBbGdvcih0aGlzLmFsZ29yKTtcbiAgICAgICAgICB0aGlzLnJlc3VsdENhbGNIYXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IEhhc2hlciBmcm9tICcuL2hhc2hlcic7XG5pbXBvcnQgV29ya2VyIGZyb20gJy4vd2ViLndvcmtlcic7XG5cbmNvbnNvbGUubG9nKCdhcHAgc3RhcnRlZCcpO1xuY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcigpO1xuY29uc3QgaGFzaGVyID0gbmV3IEhhc2hlcih3b3JrZXIpO1xuXG5oYXNoZXIuZXZlbnRzKCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXJfZm4oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ3ZWIud29ya2VyLndvcmtlci5qc1wiKTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PSAnb2JqZWN0JyB8fCBpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKCkgOiBbXTtcbiAgICBmb3IgKDshKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcyhsZW5ndGgpIDogQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX1JFSkVDVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2godGFyZ2V0LCB2YWx1ZSk7ICAgICAgLy8gZmlsdGVyUmVqZWN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJSZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyUmVqZWN0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyhbXS5zbGljZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgcmVkZWZpbmUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwuYmluZChhcHBseSkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGFwcGx5LCBhcmd1bWVudHMpO1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUuYmluZDtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EICYmIGJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7XG4gIGlmIChhQ2FsbGFibGUoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QoY2FsbChpdGVyYXRvck1ldGhvZCwgYXJndW1lbnQpKTtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMoc3RvcmUuaGFzKTtcbiAgdmFyIHdtc2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuc2V0KTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcyhzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYElzQ2FsbGFibGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsIE9iamVjdChpdCkpO1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwga2luZCwgdmFsdWUpIHtcbiAgdmFyIGlubmVyUmVzdWx0LCBpbm5lckVycm9yO1xuICBhbk9iamVjdChpdGVyYXRvcik7XG4gIHRyeSB7XG4gICAgaW5uZXJSZXN1bHQgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICBpZiAoIWlubmVyUmVzdWx0KSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gY2FsbChpbm5lclJlc3VsdCwgaXRlcmF0b3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlubmVyRXJyb3IgPSB0cnVlO1xuICAgIGlubmVyUmVzdWx0ID0gZXJyb3I7XG4gIH1cbiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICBpZiAoaW5uZXJFcnJvcikgdGhyb3cgaW5uZXJSZXN1bHQ7XG4gIGFuT2JqZWN0KGlubmVyUmVzdWx0KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICByZWRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0NhbGxhYmxlKFdlYWtNYXApICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7XG52YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7XG52YXIgV1JJVEFCTEUgPSAnd3JpdGFibGUnO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gYXJyYXlTbGljZSh3aW5kb3dOYW1lcyk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiBjbGFzc29mKGl0KSA9PSAnV2luZG93J1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgaWYgKGhhc093bihvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5DT05GSUdVUkFCTEU7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zICYmIG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDoga2V5O1xuICB2YXIgc3RhdGU7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkge1xuICAgIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgICAgbmFtZSA9ICdbJyArIFN0cmluZyhuYW1lKS5yZXBsYWNlKC9eU3ltYm9sXFwoKFteKV0qKVxcKS8sICckMScpICsgJ10nO1xuICAgIH1cbiAgICBpZiAoIWhhc093bih2YWx1ZSwgJ25hbWUnKSB8fCAoQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgJiYgdmFsdWUubmFtZSAhPT0gbmFtZSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBuYW1lKTtcbiAgICB9XG4gICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFzdGF0ZS5zb3VyY2UpIHtcbiAgICAgIHN0YXRlLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIG5hbWUgPT0gJ3N0cmluZycgPyBuYW1lIDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUodGhpcykgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwLCByZWdleHAvbm8tbGF6eS1lbmRzIC0tIHRlc3RpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby11c2VsZXNzLXF1YW50aWZpZXIgLS0gdGVzdGluZyAqL1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMSwgJ2EnKTtcbiAgY2FsbChuYXRpdmVFeGVjLCByZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cmluZykge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShyZSk7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJhdyA9IHN0YXRlLnJhdztcbiAgICB2YXIgcmVzdWx0LCByZUNvcHksIGxhc3RJbmRleCwgbWF0Y2gsIGksIG9iamVjdCwgZ3JvdXA7XG5cbiAgICBpZiAocmF3KSB7XG4gICAgICByYXcubGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgcmVzdWx0ID0gY2FsbChwYXRjaGVkRXhlYywgcmF3LCBzdHIpO1xuICAgICAgcmUubGFzdEluZGV4ID0gcmF3Lmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwcyA9IHN0YXRlLmdyb3VwcztcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gY2FsbChyZWdleHBGbGFncywgcmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAneScsICcnKTtcbiAgICAgIGlmIChpbmRleE9mKGZsYWdzLCAnZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBzdHJpbmdTbGljZShzdHIsIHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBjaGFyQXQoc3RyLCByZS5sYXN0SW5kZXggLSAxKSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gY2FsbChuYXRpdmVFeGVjLCBzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBzdHJpbmdTbGljZShtYXRjaC5pbnB1dCwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gc3RyaW5nU2xpY2UobWF0Y2hbMF0sIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgY2FsbChuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlKG51bGwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncm91cCA9IGdyb3Vwc1tpXTtcbiAgICAgICAgb2JqZWN0W2dyb3VwWzBdXSA9IG1hdGNoW2dyb3VwWzFdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbi8vIFVDIEJyb3dzZXIgYnVnXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTAwOFxudmFyIE1JU1NFRF9TVElDS1kgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEkUmVnRXhwKCdhJywgJ3knKS5zdGlja3k7XG59KTtcblxudmFyIEJST0tFTl9DQVJFVCA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gJFJlZ0V4cCgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJST0tFTl9DQVJFVDogQlJPS0VOX0NBUkVULFxuICBNSVNTRURfU1RJQ0tZOiBNSVNTRURfU1RJQ0tZLFxuICBVTlNVUFBPUlRFRF9ZOiBVTlNVUFBPUlRFRF9ZXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJy4nLCAncycpIC0+IC8uL3MgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnLicsICdzJyk7XG4gIHJldHVybiAhKHJlLmRvdEFsbCAmJiByZS5leGVjKCdcXG4nKSAmJiByZS5mbGFncyA9PT0gJ3MnKTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJyg/PGE+YiknLCAnZycpIC0+IC8oPzxhPmIpL2cgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnKD88YT5iKScsICdnJyk7XG4gIHJldHVybiByZS5leGVjKCdiJykuZ3JvdXBzLmEgIT09ICdiJyB8fFxuICAgICdiJy5yZXBsYWNlKHJlLCAnJDxhPmMnKSAhPT0gJ2JjJztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKHRhcmdldCAmJiAhU1RBVElDKSB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0ICYmICFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIwLjMnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjIwLjMvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKClcbiAgICAgIHx8IG5vbltNRVRIT0RfTkFNRV0oKSAhPT0gbm9uXG4gICAgICB8fCAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FKTtcbiAgfSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gc2FmZVxuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IChudW1iZXIgPiAwID8gZmxvb3IgOiBjZWlsKShudW1iZXIpO1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgT2JqZWN0ID0gZ2xvYmFsLk9iamVjdDtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IGtleSArICcnO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPSA0Mjtcbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN5bWJvbEZvciA9IFN5bWJvbCAmJiBTeW1ib2xbJ2ZvciddO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICdTeW1ib2wuJyArIG5hbWU7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzT3duKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2UgaWYgKFVTRV9TWU1CT0xfQVNfVUlEICYmIHN5bWJvbEZvcikge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gc3ltYm9sRm9yKGRlc2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3RcbnZhciB2YWx1ZXMgPSBJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLy8gVjggfiBDaHJvbWUgNDUtIGJ1Z1xuaWYgKCFJU19QVVJFICYmIERFU0NSSVBUT1JTICYmIHZhbHVlcy5uYW1lICE9PSAndmFsdWVzJykgdHJ5IHtcbiAgZGVmaW5lUHJvcGVydHkodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgdW4kU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW4kU2xpY2UoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmV4ZWNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLmV4ZWNcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgc3ltYm9sVmFsdWVPZiA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xWYWx1ZU9mKHRoaXMpO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBOQVRJVkVfU1lNQk9MID8gc3RyaW5nU2xpY2Uoc3RyaW5nLCA3LCAtMSkgOiByZXBsYWNlKHN0cmluZywgcmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZShTeW1ib2xQcm90b3R5cGUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXNPd24oTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhc093bihPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgY2FsbCgkcHJvcGVydHlJc0VudW1lcmFibGUsIHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJvcGVydHlLZXkoVik7XG4gIHZhciBlbnVtZXJhYmxlID0gY2FsbChuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSwgdGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIFApICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhc093bih0aGlzLCBQKSB8fCAhaGFzT3duKEFsbFN5bWJvbHMsIFApIHx8IGhhc093bih0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXVxuICAgID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXNPd24oaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKGhpZGRlbktleXMsIGtleSkpIHB1c2gocmVzdWx0LCBrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXNPd24oT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcHVzaChyZXN1bHQsIEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC1jb25zdHJ1Y3RvclxuaWYgKCFOQVRJVkVfU1lNQk9MKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKSkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICR0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIGNhbGwoc2V0dGVyLCBPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzT3duKHRoaXMsIEhJRERFTikgJiYgaGFzT3duKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbFtQUk9UT1RZUEVdO1xuXG4gIHJlZGVmaW5lKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICByZWRlZmluZSgkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9ICR0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzT3duKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghU3ltYm9sUHJvdG90eXBlW1RPX1BSSU1JVElWRV0pIHtcbiAgdmFyIHZhbHVlT2YgPSBTeW1ib2xQcm90b3R5cGUudmFsdWVPZjtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gIHJlZGVmaW5lKFN5bWJvbFByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBmdW5jdGlvbiAoaGludCkge1xuICAgIC8vIFRPRE86IGltcHJvdmUgaGludCBsb2dpY1xuICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICB9KTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKlxuICBlc2xpbnQtZGlzYWJsZVxuICBuby1jb25zb2xlLFxuICBmdW5jLW5hbWVzXG4qL1xudmFyIG5vcm1hbGl6ZVVybCA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLXVybCcpO1xuXG52YXIgc3JjQnlNb2R1bGVJZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgbm9Eb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCc7XG52YXIgZm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuXG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgdGltZSkge1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmdW5jdGlvbkNhbGwgPSBmdW5jdGlvbiBmdW5jdGlvbkNhbGwoKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbkNhbGwsIHRpbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCkge1xuICB2YXIgc3JjID0gc3JjQnlNb2R1bGVJZFttb2R1bGVJZF07XG5cbiAgaWYgKCFzcmMpIHtcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkge1xuICAgICAgc3JjID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICAgICAgdmFyIGxhc3RTY3JpcHRUYWcgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChsYXN0U2NyaXB0VGFnKSB7XG4gICAgICAgIHNyYyA9IGxhc3RTY3JpcHRUYWcuc3JjO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdID0gc3JjO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlTWFwKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzcGxpdFJlc3VsdCA9IHNyYy5zcGxpdCgvKFteXFxcXC9dKylcXC5qcyQvKTtcbiAgICB2YXIgZmlsZW5hbWUgPSBzcGxpdFJlc3VsdCAmJiBzcGxpdFJlc3VsdFsxXTtcblxuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIGlmICghZmlsZU1hcCkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGVNYXAuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKG1hcFJ1bGUpIHtcbiAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KGZpbGVuYW1lLCBcIlxcXFwuanMkXCIpLCAnZycpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVVybChzcmMucmVwbGFjZShyZWcsIFwiXCIuY29uY2F0KG1hcFJ1bGUucmVwbGFjZSgve2ZpbGVOYW1lfS9nLCBmaWxlbmFtZSksIFwiLmNzc1wiKSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDc3MoZWwsIHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cblxuICAgIHVybCA9IGVsLmhyZWYuc3BsaXQoJz8nKVswXTtcbiAgfVxuXG4gIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWwuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgLy8gV2Ugc2VlbSB0byBiZSBhYm91dCB0byByZXBsYWNlIGEgY3NzIGxpbmsgdGhhdCBoYXNuJ3QgbG9hZGVkIHlldC5cbiAgICAvLyBXZSdyZSBwcm9iYWJseSBjaGFuZ2luZyB0aGUgc2FtZSBmaWxlIG1vcmUgdGhhbiBvbmNlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghdXJsIHx8ICEodXJsLmluZGV4T2YoJy5jc3MnKSA+IC0xKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIGVsLnZpc2l0ZWQgPSB0cnVlO1xuICB2YXIgbmV3RWwgPSBlbC5jbG9uZU5vZGUoKTtcbiAgbmV3RWwuaXNMb2FkZWQgPSBmYWxzZTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobmV3RWwuaXNMb2FkZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXdFbC5pc0xvYWRlZCA9IHRydWU7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH0pO1xuICBuZXdFbC5ocmVmID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KERhdGUubm93KCkpO1xuXG4gIGlmIChlbC5uZXh0U2libGluZykge1xuICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0VsLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChuZXdFbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsb2FkVXJsKGhyZWYsIHNyYykge1xuICB2YXIgcmV0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICBocmVmID0gbm9ybWFsaXplVXJsKGhyZWYsIHtcbiAgICBzdHJpcFdXVzogZmFsc2VcbiAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJheS1jYWxsYmFjay1yZXR1cm5cblxuICBzcmMuc29tZShmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKGhyZWYuaW5kZXhPZihzcmMpID4gLTEpIHtcbiAgICAgIHJldCA9IHVybDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiByZWxvYWRTdHlsZShzcmMpIHtcbiAgaWYgKCFzcmMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIHZhciBsb2FkZWQgPSBmYWxzZTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gZ2V0UmVsb2FkVXJsKGVsLmhyZWYsIHNyYyk7XG5cbiAgICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICB1cGRhdGVDc3MoZWwsIHVybCk7XG4gICAgICBsb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsb2FkZWQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZEFsbCgpIHtcbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQ3NzKGVsKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVXJsUmVxdWVzdCh1cmwpIHtcbiAgLy8gQW4gVVJMIGlzIG5vdCBhbiByZXF1ZXN0IGlmXG4gIC8vIEl0IGlzIG5vdCBodHRwIG9yIGh0dHBzXG4gIGlmICghL15odHRwcz86L2kudGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBvcHRpb25zKSB7XG4gIGlmIChub0RvY3VtZW50KSB7XG4gICAgY29uc29sZS5sb2coJ25vIHdpbmRvdy5kb2N1bWVudCBmb3VuZCwgd2lsbCBub3QgSE1SIENTUycpO1xuICAgIHJldHVybiBub29wO1xuICB9XG5cbiAgdmFyIGdldFNjcmlwdFNyYyA9IGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgc3JjID0gZ2V0U2NyaXB0U3JjKG9wdGlvbnMuZmlsZW5hbWUpO1xuICAgIHZhciByZWxvYWRlZCA9IHJlbG9hZFN0eWxlKHNyYyk7XG5cbiAgICBpZiAob3B0aW9ucy5sb2NhbHMpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBEZXRlY3RlZCBsb2NhbCBjc3MgbW9kdWxlcy4gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIGNzcyByZWxvYWQgJXMnLCBzcmMuam9pbignICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVib3VuY2UodXBkYXRlLCA1MCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZnVuY3Rpb24gbm9ybWFsaXplVXJsKHBhdGhDb21wb25lbnRzKSB7XG4gIHJldHVybiBwYXRoQ29tcG9uZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBpdGVtKSB7XG4gICAgc3dpdGNoIChpdGVtKSB7XG4gICAgICBjYXNlICcuLic6XG4gICAgICAgIGFjY3VtdWxhdG9yLnBvcCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnLic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwgW10pLmpvaW4oJy8nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsU3RyaW5nKSB7XG4gIHVybFN0cmluZyA9IHVybFN0cmluZy50cmltKCk7XG5cbiAgaWYgKC9eZGF0YTovaS50ZXN0KHVybFN0cmluZykpIHtcbiAgICByZXR1cm4gdXJsU3RyaW5nO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdXJsU3RyaW5nLmluZGV4T2YoJy8vJykgIT09IC0xID8gdXJsU3RyaW5nLnNwbGl0KCcvLycpWzBdICsgJy8vJyA6ICcnO1xuICB2YXIgY29tcG9uZW50cyA9IHVybFN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAocHJvdG9jb2wsICdpJyksICcnKS5zcGxpdCgnLycpO1xuICB2YXIgaG9zdCA9IGNvbXBvbmVudHNbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLywgJycpO1xuICBjb21wb25lbnRzWzBdID0gJyc7XG4gIHZhciBwYXRoID0gbm9ybWFsaXplVXJsKGNvbXBvbmVudHMpO1xuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aDtcbn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTY0MjI1MDI4NDQ0M1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvaG9tZS9hcHB2ZXlvci9wcm9qZWN0cy9haGotd29ya2Vycy1oYXNoZXIvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChjYWNoZWRNb2R1bGUuZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgY2FjaGVkTW9kdWxlLmVycm9yO1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR0cnkge1xuXHRcdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0XHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdFx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblx0fSBjYXRjaChlKSB7XG5cdFx0bW9kdWxlLmVycm9yID0gZTtcblx0XHR0aHJvdyBlO1xuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgXCJtYWluXCIgKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCIpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjExMzJmNWFjOTc5ZWM2NGM2NTNhXCIpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVzdWx0c1tpXSA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xufVxuXG5mdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7XG5cdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZuKCk7XG5cdHZhciBibG9ja2VyID0gYmxvY2tpbmdQcm9taXNlcztcblx0YmxvY2tpbmdQcm9taXNlcyA9IFtdO1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoYmxvY2tlcikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG5cdH1cblx0cmV0dXJuIHNldFN0YXR1cyhcImNoZWNrXCIpXG5cdFx0LnRoZW4oX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHtcblx0XHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKS50aGVuKFxuXHRcdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInByZXBhcmVcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdFx0XHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0a2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFtdKVxuXHRcdFx0XHQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJyZWFkeVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdXBkYXRlZE1vZHVsZXM7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiYWJvcnRcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0dmFyIGRpc3Bvc2VQcm9taXNlID0gc2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHR2YXIgYXBwbHlQcm9taXNlID0gc2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwoW2Rpc3Bvc2VQcm9taXNlLCBhcHBseVByb21pc2VdKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcImZhaWxcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gbGlzdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJpZGxlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wIHx8IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxudmFyIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3Q7XG52YXIgd2FpdGluZ1VwZGF0ZVJlc29sdmVzID0ge307XG5mdW5jdGlvbiBsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7XG5cdFx0Ly8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmdcblx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5odShjaHVua0lkKTtcblx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0XHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7XG5cdH0pO1xufVxuXG5zZWxmW1wid2VicGFja0hvdFVwZGF0ZWFoal93b3JrZXJzX2hhc2hlclwiXSA9IChjaHVua0lkLCBtb3JlTW9kdWxlcywgcnVudGltZSkgPT4ge1xuXHRmb3IodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0aWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgY3VycmVudFVwZGF0ZVJ1bnRpbWUucHVzaChydW50aW1lKTtcblx0aWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKCk7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHR9XG59O1xuXG52YXIgY3VycmVudFVwZGF0ZUNodW5rcztcbnZhciBjdXJyZW50VXBkYXRlO1xudmFyIGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lO1xuZnVuY3Rpb24gYXBwbHlIYW5kbGVyKG9wdGlvbnMpIHtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikgZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtcjtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKHVwZGF0ZU1vZHVsZUlkKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG5cdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cblx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Y2hhaW46IFtpZF0sXG5cdFx0XHRcdGlkOiBpZFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuXHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuXHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFtb2R1bGUgfHxcblx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuXHRcdFx0KVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG5cdFx0XHRcdHZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdO1xuXHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG5cdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcblx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG5cdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcblx0XHRcdFx0cXVldWUucHVzaCh7XG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcblx0XHRcdFx0XHRpZDogcGFyZW50SWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcblx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcblx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuXHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gYltpXTtcblx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcblx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuXHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG5cdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUobW9kdWxlKSB7XG5cdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyBtb2R1bGUuaWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcblx0XHQpO1xuXHR9O1xuXG5cdGZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdFx0dmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTtcblx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAobmV3TW9kdWxlRmFjdG9yeSkge1xuXHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG5cdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcblx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcblx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuXHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuXHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGVycm9yOiBhYm9ydEVycm9yXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9BcHBseSkge1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG5cdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcblx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkO1xuXG5cdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cblx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuXHRmb3IgKHZhciBqID0gMDsgaiA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGorKykge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdO1xuXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0aWYgKFxuXHRcdFx0bW9kdWxlICYmXG5cdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogbW9kdWxlLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzLnB1c2goZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzW2tdKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGU6IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzM3MSk7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiY3JlYXRlU3R5bGVzaGVldCIsImZpbmRTdHlsZXNoZWV0Iiwib2xkVGFncyIsIm5ld1RhZ3MiLCJhcHBseUhhbmRsZXIiLCJIYXNoZXIiLCJ3b3JrZXIiLCJ0aGlzIiwiZG5kIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZG5kSW5wdXQiLCJjaG9pY2VBbGdvciIsImxpc3RBbGdvciIsImhhc2hUZXh0IiwiYWxnb3IiLCJoYXNoIiwiZmlsZSIsImNsaWNrT25BbGdvcml0aG1zIiwiaW5wdXRGaWxlIiwiZHJvcEZpbGUiLCJjbGlja0Nob2ljZUFsZ29yaXRobXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJ0YXJnZXQiLCJmaWxlcyIsInJlc3VsdENhbGNIYXNoIiwicHJldmVudERlZmF1bHQiLCJBcnJheSIsImZyb20iLCJkYXRhVHJhbnNmZXIiLCJyZW5kZXJDYWxjSGFzaCIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwicG9zdE1lc3NhZ2UiLCJ3ZWJXb3JrZXIiLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiYWRkIiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJ0cmltIiwicmVuZGVyQ2hhbmdlQWxnb3IiLCJXb3JrZXIiLCJldmVudHMiLCJnbG9iYWwiLCJpc0NhbGxhYmxlIiwidHJ5VG9TdHJpbmciLCJUeXBlRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJndW1lbnQiLCJTdHJpbmciLCJ3ZWxsS25vd25TeW1ib2wiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJwcm90b3R5cGUiLCJ1bmRlZmluZWQiLCJmIiwiY29uZmlndXJhYmxlIiwidmFsdWUiLCJrZXkiLCJpc09iamVjdCIsImJpbmQiLCJjYWxsIiwidG9PYmplY3QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiaXNDb25zdHJ1Y3RvciIsImxlbmd0aE9mQXJyYXlMaWtlIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvciIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYXJyYXlMaWtlIiwiTyIsIklTX0NPTlNUUlVDVE9SIiwiYXJndW1lbnRzTGVuZ3RoIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwicmVzdWx0Iiwic3RlcCIsIml0ZXJhdG9yIiwibmV4dCIsIml0ZXJhdG9yTWV0aG9kIiwiaW5kZXgiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwidW5jdXJyeVRoaXMiLCJJbmRleGVkT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwiZm9yRWFjaCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJSZWplY3QiLCJmYWlscyIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImNvbnN0cnVjdG9yIiwiZm9vIiwiQm9vbGVhbiIsIm1heCIsIk1hdGgiLCJzdGFydCIsImVuZCIsImsiLCJmaW4iLCJuIiwic2xpY2UiLCJpc0FycmF5Iiwib3JpZ2luYWxBcnJheSIsIkMiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImFuT2JqZWN0IiwiaXRlcmF0b3JDbG9zZSIsImZuIiwiRU5UUklFUyIsImVycm9yIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJleGVjIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJvYmplY3QiLCJ0b1N0cmluZyIsInN0cmluZ1NsaWNlIiwiaXQiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyIsIk9iamVjdCIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiaGFzT3duIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsInNvdXJjZSIsImV4Y2VwdGlvbnMiLCJrZXlzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJGIiwiZ2V0UHJvdG90eXBlT2YiLCJJdGVyYXRvclByb3RvdHlwZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiRU5VTUVSQUJMRV9ORVhUIiwiREVTQ1JJUFRPUlMiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJ0b1Byb3BlcnR5S2V5IiwicHJvcGVydHlLZXkiLCIkIiwiSVNfUFVSRSIsIkZ1bmN0aW9uTmFtZSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwiSXRlcmF0b3JzQ29yZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJDT05GSUdVUkFCTEUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsIm5hbWUiLCJ2YWx1ZXMiLCJwcm90byIsImZvcmNlZCIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiU3ltYm9sIiwiZ2V0IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiZ2V0QnVpbHRJbiIsIm1hdGNoIiwidmVyc2lvbiIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsInNwbGl0Iiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0Iiwic2hhbSIsIk5BVElWRV9CSU5EIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvbiIsImFwcGx5IiwiUmVmbGVjdCIsImFDYWxsYWJsZSIsInRlc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImdldERlc2NyaXB0b3IiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJjbGFzc29mIiwiZ2V0TWV0aG9kIiwidXNpbmdJdGVyYXRvciIsIlYiLCJQIiwiZnVuYyIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJhIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzdG9yZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwic2V0IiwiaGFzIiwiTkFUSVZFX1dFQUtfTUFQIiwic2hhcmVkIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIk9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEIiwiV2Vha01hcCIsInN0YXRlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJnZXR0ZXJGb3IiLCJ0eXBlIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImlzUHJvdG90eXBlT2YiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJraW5kIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsInRvTGVuZ3RoIiwib2JqIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImRvbWFpbiIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJQcm9wZXJ0aWVzIiwiVjhfUFJPVE9UWVBFX0RFRklORV9CVUciLCJvYmplY3RLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiSUU4X0RPTV9ERUZJTkUiLCIkZGVmaW5lUHJvcGVydHkiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiQXR0cmlidXRlcyIsImN1cnJlbnQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlTbGljZSIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiaW5wdXQiLCJwcmVmIiwidmFsIiwidmFsdWVPZiIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJzaW1wbGUiLCJqb2luIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwiVU5TVVBQT1JURURfRE9UX0FMTCIsIlVOU1VQUE9SVEVEX05DRyIsIm5hdGl2ZVJlcGxhY2UiLCJuYXRpdmVFeGVjIiwiUmVnRXhwIiwicGF0Y2hlZEV4ZWMiLCJjaGFyQXQiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwicmUiLCJzdHIiLCJyYXciLCJncm91cHMiLCJzdGlja3kiLCJmbGFncyIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsInVuaWNvZGUiLCIkUmVnRXhwIiwiTUlTU0VEX1NUSUNLWSIsIlRBRyIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJmaXJzdCIsInNlY29uZCIsIlMiLCJwb3NpdGlvbiIsInNpemUiLCJjb2RlQXQiLCJ3aGl0ZXNwYWNlcyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwibWluIiwiaW50ZWdlciIsImNlaWwiLCJmbG9vciIsIm51bWJlciIsImlzU3ltYm9sIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsIlRPX1BSSU1JVElWRSIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiTkFUSVZFX1NZTUJPTCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJkZXNjcmlwdGlvbiIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsIml0ZXJhYmxlIiwiYWRkVG9VbnNjb3BhYmxlcyIsImRlZmluZUl0ZXJhdG9yIiwiQVJSQVlfSVRFUkFUT1IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJBcmd1bWVudHMiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwidW4kU2xpY2UiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiQ29uc3RydWN0b3IiLCJGVU5DVElPTl9OQU1FX0VYSVNUUyIsIm5hbWVSRSIsInJlZ0V4cEV4ZWMiLCJTVFJJTkdfSVRFUkFUT1IiLCJwb2ludCIsIiR0cmltIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsIk5hdGl2ZVN5bWJvbCIsIlN5bWJvbFByb3RvdHlwZSIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xUb1N0cmluZyIsInN5bWJvbFZhbHVlT2YiLCJyZWdleHAiLCJkZXNjIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiJHRvU3RyaW5nIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiJGZvckVhY2giLCJISURERU4iLCJTWU1CT0wiLCJRT2JqZWN0IiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIndyYXAiLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsImtleUZvciIsInN5bSIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInN0cmluZ2lmeSIsInJlcGxhY2VyIiwic3BhY2UiLCJhcmdzIiwiJHJlcGxhY2VyIiwiaGludCIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIm5vRG9jdW1lbnQiLCJ1cGRhdGVDc3MiLCJ1cmwiLCJocmVmIiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJEYXRlIiwibm93IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJyZWxvYWRBbGwiLCJlbGVtZW50cyIsIm1vZHVsZUlkIiwidGltZW91dCIsImdldFNjcmlwdFNyYyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsYXN0U2NyaXB0VGFnIiwiZmlsZU1hcCIsInNwbGl0UmVzdWx0IiwiZmlsZW5hbWUiLCJtYXBSdWxlIiwicmVnIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRTdHlsZSIsImxvY2FscyIsImZ1bmN0aW9uQ2FsbCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ1cmxTdHJpbmciLCJwcm90b2NvbCIsImNvbXBvbmVudHMiLCJob3N0IiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpdGVtIiwicG9wIiwiY3NzUmVsb2FkIiwiaG90IiwiZGlzcG9zZSIsImFjY2VwdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZWRNb2R1bGUiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVxdWlyZSIsImhhbmRsZXIiLCJlIiwibSIsImMiLCJodSIsImNodW5rSWQiLCJoIiwibWluaUNzc0YiLCJobXJGIiwibyIsInByb3AiLCJsIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwicmVzdWx0cyIsIlByb21pc2UiLCJhbGwiLCJ3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyIsImJsb2NrZXIiLCJ0aGVuIiwiaG90Q2hlY2siLCJhcHBseU9uVXBkYXRlIiwiRXJyb3IiLCJobXJNIiwidXBkYXRlIiwidXBkYXRlZE1vZHVsZXMiLCJobXJDIiwicHJvbWlzZXMiLCJyIiwiaW50ZXJuYWxBcHBseSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJyZXNvbHZlIiwiZXJyb3JzIiwiZGlzcG9zZVByb21pc2UiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJsaXN0IiwiaG1ySSIsImhtckQiLCJtZSIsIl9tYWluIiwicmVxdWVzdCIsImFjdGl2ZSIsInBhcmVudHMiLCJjaGlsZHJlbiIsIndhcm4iLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJkZXAiLCJjYWxsYmFjayIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsInN0YXR1cyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwicCIsImZ1bGxocmVmIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY29kZSIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJtZXNzYWdlIiwiZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwYXJlbnRJZCIsInBhcmVudCIsImFkZEFsbFRvU2V0IiwiYiIsImpzb25wSG1yIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsIm5ld01vZHVsZUZhY3RvcnkiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiaiIsIm91dGRhdGVkTW9kdWxlSWQiLCJkZXBlbmRlbmN5IiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJjYWxsYmFja3MiLCJlcnJvckhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJkZXBlbmRlbmN5SWQiLCJlcnIyIiwib25FcnJvcmVkIiwib3JpZ2luYWxFcnJvciIsImlnbm9yZUVycm9yZWQiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJqc29ucCIsImZldGNoIiwicmVzcG9uc2UiLCJvayIsInN0YXR1c1RleHQiLCJqc29uIl0sInNvdXJjZVJvb3QiOiIifQ==